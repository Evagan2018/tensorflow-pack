# This is a basic workflow to help you get started with Actions

name: Nightly CI using Arm Virtual Hardware

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 0 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-tensorflow:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
  
      - name: Checkout tensorflow-build 
        uses: actions/checkout@v2
        with: 
          repository: MDK-Packs/tensorflow-pack
          path: tensorflow-pack
         
      - name: Checkout tensorflow
        uses: actions/checkout@v2
        with: 
          repository: tensorflow/tflite-micro
          path: tensorflow
          clean: false  

      - name: Create Container runtime from DockerHub
        run : |
          docker run -i -v ${{ github.workspace }}:/workspace/host --mac-address="00:02:F7:FF:55:55" --name build_runtime -d armswdev/cmsis_tools_m55:latest 
          docker exec build_runtime pip3 install six requests pyyaml junit_xml pillow
          docker exec build_runtime cp /workspace/host/tensorflow-pack/tensorflow-build/.wgetrc /root/.wgetrc 
          mkdir ${{ github.workspace }}/out/
      
           
      - name: Prepare list of sources for tensorflow library
        run : 
          docker exec build_runtime /bin/bash /workspace/host/tensorflow-pack/tensorflow-build/prep.sh

      - name: Fix various issues in list of modules
        run : 
          docker exec build_runtime /bin/bash /workspace/host/tensorflow-pack/tensorflow-build/hotfix.sh
      
      - name: Build TensorFlow Pack and run PackChk
        run : 
          docker exec build_runtime /bin/bash /workspace/host/tensorflow-pack/tensorflow-build/build.sh
          
      - name: Copy tensorflow-pack to out path
        run : 
          cp ${{ github.workspace }}/tensorflow-pack/tensorflow-build/gen/*.pack ${{ github.workspace }}/out/

      - name: Build 3rd Party Pack Flatbuffers 
        run : |
          docker exec build_runtime python3 /workspace/host/tensorflow-pack/3rdparty-build/gen_pack.py --path=/workspace/host/tensorflow-pack/3rdparty-build/flatbuffers --date_tag
          cp ${{ github.workspace }}/tensorflow-pack/3rdparty-build/flatbuffers/build/*.pack ${{ github.workspace }}/out/

      - name: Build 3rd Party Pack KissFFT
        run : |
          docker exec build_runtime python3 /workspace/host/tensorflow-pack/3rdparty-build/gen_pack.py --path=/workspace/host/tensorflow-pack/3rdparty-build/kissfft --date_tag
          cp ${{ github.workspace }}/tensorflow-pack/3rdparty-build/kissfft/build/*.pack ${{ github.workspace }}/out/

      - name: Build 3rd Party Pack gemmlowp
        run : |
          docker exec build_runtime python3 /workspace/host/tensorflow-pack/3rdparty-build/gen_pack.py --path=/workspace/host/tensorflow-pack/3rdparty-build/gemmlowp --date_tag
          cp ${{ github.workspace }}/tensorflow-pack/3rdparty-build/gemmlowp/build/*.pack ${{ github.workspace }}/out/

      - name: Build 3rd Party Pack ruy
        run : |
          docker exec build_runtime python3 /workspace/host/tensorflow-pack/3rdparty-build/gen_pack.py --path=/workspace/host/tensorflow-pack/3rdparty-build/ruy --date_tag
          cp ${{ github.workspace }}/tensorflow-pack/3rdparty-build/ruy/build/*.pack ${{ github.workspace }}/out/

      #- name: Build 3rd Party Pack Ethos-U Driver 
      #  run : |
      #    docker exec build_runtime python3 /workspace/host/tensorflow-pack/3rdparty-build/gen_pack.py --path=/workspace/host/tensorflow-pack/3rdparty-build/ethos-u-driver --date_tag
      #    cp ${{ github.workspace }}/tensorflow-pack/3rdparty-build/ethos-u-driver/build/*.pack ${{ github.workspace }}/out/
      
      
      - name: Create test projects
        run: | 
           echo "Run tests on Cortex-M55 FVP"
           docker exec build_runtime python3 /workspace/host/tensorflow-pack/tensorflow-test/testrunner_vht.py --cvariant=Reference --tflm_path=/home/ubuntu/vhtwork/ --inventory=/workspace/host/tensorflow-pack/tensorflow-test/generic_tests.yml
           mkdir ./vht
           mkdir ./vht/templates
           cp -R ${{ github.workspace }}/tensorflow-pack/tensorflow-test/vht/* ./vht
           cp -R ${{ github.workspace }}/tensorflow-pack/tensorflow-test/templates/* ./vht/templates
           cp -R ${{ github.workspace }}/out/*.pack ./vht/packs
        #  docker exec build_runtime python3 /workspace/host/tensorflow-pack/tensorflow-test/testrunner_fvp.py --cvariant=Reference --tflm_path=/workspace/host/tensorflow/ --inventory=/workspace/host/tensorflow-pack/tensorflow-test/kernel_tests_reference.yml
        #  docker exec build_runtime python3 /workspace/host/tensorflow-pack/tensorflow-test/testrunner_fvp.py --cvariant=CMSIS-NN --tflm_path=/workspace/host/tensorflow/ --inventory=/workspace/host/tensorflow-pack/tensorflow-test/kernel_tests_cmsis.yml
        #  docker exec build_runtime python3 /workspace/host/tensorflow-pack/tensorflow-test/testrunner_fvp.py --cvariant=Ethos-U --tflm_path=/workspace/host/tensorflow/ --inventory=/workspace/host/tensorflow-pack/tensorflow-test/kernel_tests_ethos.yml



      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3
      
      - name: Prepare and test test suite
        uses: Arm-Software/VHT-AMI@master
        with:
          vht_in: ./vht/
          instance_id: ${{ secrets.AWS_INSTANCE_ID }}
          aws_region: ${{ secrets.AWS_DEFAULT_REGION }}
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_KEY }}
          s3_bucket_name: ${{ secrets.AWS_S3_BUCKET }}

      - name: Execute test suite
        run: | 
           echo "Run tests on Cortex-M55 FVP"
        #   docker exec build_runtime python3 /workspace/host/tensorflow-pack/tensorflow-test/testrunner_fvp.py --cvariant=Reference --tflm_path=/workspace/host/tensorflow/ --inventory=/workspace/host/tensorflow-pack/tensorflow-test/generic_tests.yml
        #   docker exec build_runtime python3 /workspace/host/tensorflow-pack/tensorflow-test/testrunner_fvp.py --cvariant=Reference --tflm_path=/workspace/host/tensorflow/ --inventory=/workspace/host/tensorflow-pack/tensorflow-test/kernel_tests_reference.yml
        #   docker exec build_runtime python3 /workspace/host/tensorflow-pack/tensorflow-test/testrunner_fvp.py --cvariant=CMSIS-NN --tflm_path=/workspace/host/tensorflow/ --inventory=/workspace/host/tensorflow-pack/tensorflow-test/kernel_tests_cmsis.yml
        #   docker exec build_runtime python3 /workspace/host/tensorflow-pack/tensorflow-test/testrunner_fvp.py --cvariant=Ethos-U --tflm_path=/workspace/host/tensorflow/ --inventory=/workspace/host/tensorflow-pack/tensorflow-test/kernel_tests_ethos.yml

      - name: Fetch results from VHT
        run: |
          tar xvzf out.tar
          cat ./home/ubuntu/vhtwork/out/activation_test.cprj.stdio


      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: ${{ github.workspace }}/tensorflow-pack/**/*.junit
    
      - name: Upload Pack
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/out
        
      - name: Upload Test Reports
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/out.tar
        
        
